#!/usr/bin/env node
var _ = require('lodash');
var prog = require('commander');
var fileSave = require('file-save');
var allin_html = require('allin');
var path = require('path');
var stage= require('node-stage');
var Q = require('q');
var FS = require("q-io/fs");
var chalk= require('chalk');
var util= require('util');

var pkg = require('../package.json');

var build = require('../lib/build');
var init = require('../lib/init');
var get = require('../lib/get');
var apps= require('../lib/apps');
var auth= require('../lib/auth');
var data= require('../lib/data');
var git= require('../lib/git');
var jsome= require('jsome');

var printErr= function (err) {
  console.log(chalk.red(err));
}


var arg = process.argv;

// General options
prog
  .version(pkg.version)

// get a generator
// prog
//  .command('get [generator]')
//  .description('Get a can (generator)!')
//  .action(function(generator) {
//    if(generator)
//      return get(generator)
//    console.log('$ canner get [generator], generator have to have an value, ex: sample, ...')
//    process.exit(1);
//  });


// initialize the project
prog
  .command('create [source_dir]')
  .description('Create initial files and folders, under a directory.')
  .usage('[options] <directory>')
  .option('-g, --generator <generator>', 'Inital generate the generator that you are finding.')
  .action(function(dir) {

    var generator = prog.args[1].generator ? prog.args[1].generator : null;
    dir = dir || process.cwd();

    init(dir, generator).catch(function (err) {
      stage.error(err);
    })
  });

// building docs from canner
prog
  .command('build [canner.json]')
  .description('Build a canner from a canner.json')
  .usage('[options] <source to canner.json, default ./canner.json>')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
  .option('-e, --engine <template engine>', 'Choose a template engine. Default engine "handlebars"')
  .option('-p, --port <port number>', 'Port which your local server start.')
  .action(function(dir) {
    build.folder(dir, prog.args[1], false)
         .catch(function (err) {
           stage.error(err);
         })
  });

// watching docs from canner
prog
  .command('watch [canner.json]')
  .description('Watching any changes in a canner and recompiled')
  .usage('[options] <source to canner.json, default ./canner.json>')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
  .option('-e, --engine <template engine>', 'Choose a template engine. Default engine "handlebars"')
  .option('-p, --port <port number>', 'Port which your local server start.')
  .action(function(dir) {
    build.folder(dir, prog.args[1], true)
         .catch(function (err) {
           stage.error(err);
         })
  });

// make html include files all warp allin
prog
  .command('allin [htmlfile]')
  .description('Make html include files all warp allin')
  .usage('[options] <source to your html, default ./index.html>')
  .option('-m, --minifyall', 'Minify css, html, js, images.')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-n, --filename <filename>', 'Output html file name, default to output.html')
  .action(function(htmlfile) {

    var opt = {
      "minifyCSS": true,
      "minifyJS": true,
      "removeComments":true,
      "collapseWhitespace": true
    };

    var filename = prog.args[1].filename ? prog.args[1].filename : 'output.html';
    var output = prog.args[1].output ? prog.args[1].output : './';
    var minify = prog.args[1].minifyall ? prog.args[1].minifyall : null;

    if(!minify) {
      opt = null;
    }

    allin_html(path.resolve(process.cwd(), htmlfile), opt, function(all) {
      fileSave(path.resolve(path.join(process.cwd(), output, filename)))
        .write(all);
    });
  });

// login
prog
  .command('login')
  .description('login to use canner.io api')
  .usage('login')
  .action(function() {
    auth.login().then(function (body) {
      console.log(chalk.green('welcome '+body.username+'!'));
    }, printErr)
  });

// logout
prog
  .command('logout')
  .description('logout from canner.io api')
  .usage('logout')
  .action(function() {
    auth.logout().then(function (body) {
      console.log(chalk.green('successfully logout!'))
    }, printErr)
  });


// apps create
prog
  .command('apps:create [app_url]')
  .description('create an app on canner.io')
  .usage('[options] <app_url>')
  .action(function(appUrl) {
    apps.create(appUrl).then(function (app) {
      // print success
      // show git url
      console.log(chalk.yellow('create app successfully!'));
      console.log(chalk.green('Name: ')+app.url);
      console.log(chalk.green('Git url: ')+app.gitUrl);
    }, printErr)
  });

// apps deploy
prog
  .command('apps:deploy [app_url]')
  .description('deploy an app on canner.io')
  .usage('[options] <app_url>')
  .action(function(appUrl) {
    apps.getUrl(appUrl)
        .then(apps.deploy, printErr)
        .then(function () {
          console.log(chalk.green('success!'))
        }, printErr)
  });

// list apps
prog
  .command('apps:list')
  .description('list my apps')
  .action(function() {
    apps.list()
        .then(function (body) {
          console.log(body)
        }, printErr)
  });

prog
  .command('apps:info [app_url]')
  .description('list my apps')
  .action(function(appUrl) {
    apps.getUrl(appUrl)
        .then(apps.info)
        .then(function (body) {
          console.log(body)
        }, printErr)
  });

// apps data push
prog
  .command('data:push [app_url]')
  .description('push data to app on canner.io')
  .usage('[options] <app_url>')
  .option('-d, --data_path <data_path>', 'file source of your data ')
  .action(function(appUrl, options) {
    // get data
    if(options.data_path){
      var datas= require(path.resolve(process.cwd(), options.data_path));
    }else{
      // default read cannerjson data
      var datas= require(path.resolve(process.cwd(), './canner.json')).data;
    }

    // push
    // get url
    apps.getUrl(appUrl)

        // push data to server
        .then(function (url) {
          return data.push(url, datas);
        }, printErr)

        // done
        .then(function () {
          console.log(chalk.green('success!'))
        }, printErr)
  });

// apps data pull
prog
  .command('data:pull [app_url]')
  .description('pull data from app on canner.io')
  .usage('[options] <app_url>')
  .option('-p, --print', 'print data')
  .option('-f, --filepath <filepath>', 'stream data to filepath')
  .action(function(appUrl, options) {
    apps.getUrl(appUrl)
        .then(data.pull, printErr)
        .then(function (body) {
          if(options.print)
            return jsome(body);
          
          // with filepath
          if(options.filepath){
            var filepath= path.resolve(process.cwd(), options.filepath);
            return FS.write(filepath, JSON.stringify(body, null, 4))
                     .then(function () {
                        console.log(chalk.green(util.format('data saved to %s', filepath)))
                     }, printErr);
          }

          // no option, write to canner.json
          var filepath= path.resolve(process.cwd(), './canner.json');
          return FS.exists(filepath)
                   .then(function (exist) {
                      if(!exist)
                        throw new Error('canner.json not exist');

                      // canner.json exist
                      var json= require(filepath);
                      json.data= body;
                      return FS.write(filepath, JSON.stringify(json, null, 4));
                   })
                   .then(function () {
                        console.log(chalk.green(util.format('data saved to %s', filepath)))
                    }, printErr)
        }, printErr)
  });

// git remote:add
prog
  .command('git:remote:add [app_url]')
  .description('add remote url to local dir')
  .usage('[options] <app_url>')
  .action(function (appUrl, options) {
    //var item= this.name().split(':')[1];
    git.remote.add(appUrl).then(function (url) {
      console.log(chalk.green('Git url: ')+url);
    }, printErr)
  })

// git remote clone
prog
  .command('git:remote:clone [app_url] [filepath]')
  .description('add remote url to local dir')
  .usage('[options] <app_url>')
  .action(function (appUrl, filepath, options) {
    git.remote.clone(appUrl, filepath).then(function (params) {
      console.log(util.format('App %s has clone to %s!!', params.name, params.path));
      console.log(util.format('Git url: %s', params.url));
    }, printErr)
  })

// configs:set xyz=1
prog
  .command('configs:set [params] [app_url]')
  .description('set configs to app on canner.io')
  .usage('[options] <params>')
  .action(function (params, appUrl) {
    var arr= params.split('=');
    var obj= {};
    obj[arr[0]]= arr[1];

    // get url
    apps.getUrl(appUrl)

        // configs set
        .then(function (url) {
            return apps.Configs.set(url, obj);
        }, printErr)
        
        // success
        .then(function () {
          var title= chalk.blue('CONFIG: ');
          var val= arr[0]+'='+arr[1]
            console.log(title+val);
        }, printErr)
  })

// if empty
if(_.isEmpty(prog.parse(process.argv).args) && process.argv.length === 2) {
  prog.help();
}
