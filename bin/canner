#!/usr/bin/env node
var _ = require('lodash');
var prog = require('commander');
var fileSave = require('file-save');
var allin_html = require('allin');
var path = require('path');
var stage= require('node-stage');
var Q = require('q');
var FS = require("q-io/fs");
var chalk= require('chalk');
var util= require('util');

var pkg = require('../package.json');

var build = require('../lib/build');
var init = require('../lib/init');
var get = require('../lib/get');
var apps= require('../lib/apps');
var auth= require('../lib/auth');
var data= require('../lib/data');
var jsome= require('jsome');

var printErr= function (err) {
  console.log(chalk.red(err));
}


var arg = process.argv;

// General options
prog
  .version(pkg.version)

// get a generator
// prog
//  .command('get [generator]')
//  .description('Get a can (generator)!')
//  .action(function(generator) {
//    if(generator)
//      return get(generator)
//    console.log('$ canner get [generator], generator have to have an value, ex: sample, ...')
//    process.exit(1);
//  });


// initialize the project
prog
  .command('create [source_dir]')
  .description('Create initial files and folders, under a directory.')
  .usage('[options] <directory>')
  .option('-g, --generator <generator>', 'Inital generate the generator that you are finding.')
  .action(function(dir) {

    var generator = prog.args[1].generator ? prog.args[1].generator : null;
    dir = dir || process.cwd();

    init(dir, generator).catch(function (err) {
      stage.error(err);
    })
  });

// building docs from canner
prog
  .command('build [canner.json]')
  .description('Build a canner from a canner.json')
  .usage('[options] <source to canner.json, default ./canner.json>')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
  .option('-e, --engine <template engine>', 'Choose a template engine. Default engine "handlebars"')
  .option('-p, --port <port number>', 'Port which your local server start.')
  .action(function(dir) {
    build.folder(dir, prog.args[1], false)
         .catch(function (err) {
           stage.error(err);
         })
  });

// watching docs from canner
prog
  .command('watch [canner.json]')
  .description('Watching any changes in a canner and recompiled')
  .usage('[options] <source to canner.json, default ./canner.json>')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
  .option('-e, --engine <template engine>', 'Choose a template engine. Default engine "handlebars"')
  .option('-p, --port <port number>', 'Port which your local server start.')
  .action(function(dir) {
    build.folder(dir, prog.args[1], true)
         .catch(function (err) {
           stage.error(err);
         })
  });

// make html include files all warp allin
prog
  .command('allin [htmlfile]')
  .description('Make html include files all warp allin')
  .usage('[options] <source to your html, default ./index.html>')
  .option('-m, --minifyall', 'Minify css, html, js, images.')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-n, --filename <filename>', 'Output html file name, default to output.html')
  .action(function(htmlfile) {

    var opt = {
      "minifyCSS": true,
      "minifyJS": true,
      "removeComments":true,
      "collapseWhitespace": true
    };

    var filename = prog.args[1].filename ? prog.args[1].filename : 'output.html';
    var output = prog.args[1].output ? prog.args[1].output : './';
    var minify = prog.args[1].minifyall ? prog.args[1].minifyall : null;

    if(!minify) {
      opt = null;
    }

    allin_html(path.resolve(process.cwd(), htmlfile), opt, function(all) {
      fileSave(path.resolve(path.join(process.cwd(), output, filename)))
        .write(all);
    });
  });

// login
prog
  .command('login')
  .description('login to use canner.io api')
  .usage('login')
  .action(function() {
    auth.login().then(function (body) {
      console.log(chalk.green('welcome '+body.username+'!'));
    }, printErr)
  });

// apps create
prog
  .command('apps:create [app_url]')
  .description('create an app on canner.io')
  .usage('[options] <app_url>')
  .action(function(appUrl) {
    apps.create(appUrl).then(function (app) {
      // print success
      // show git url
      console.log(chalk.yellow('create app successfully!'));
      console.log(chalk.green('Name: ')+app.url);
      console.log(chalk.green('Git url: ')+app.gitUrl);
    }, printErr)
  });

// apps deploy
prog
  .command('apps:deploy [app_url]')
  .description('deploy an app on canner.io')
  .usage('[options] <app_url>')
  .action(function(appUrl) {
    if(!appUrl)
      return console.log(chalk.yellow('need an app url'));

    apps.deploy(appUrl).then(function () {
      console.log(chalk.green('success!'))
    }, printErr)
  });

// apps data push
prog
  .command('data:push [app_url] [data_url]')
  .description('push data to app on canner.io')
  .usage('[options] <app_url>')
  .action(function(appUrl, dataUrl) {
    data.push(appUrl, dataUrl).then(function () {
      console.log(chalk.green('success!'))
    }, printErr)
  });

// apps data pull
prog
  .command('data:pull [app_url]')
  .description('pull data from app on canner.io')
  .usage('[options] <app_url>')
  .option('-p, --print', 'print data')
  .option('-f, --filepath <filepath>', 'stream data to filepath')
  .action(function(appUrl, options) {
    data.pull(appUrl).then(function (body) {
      if(options.print)
        return jsome(body);
      
      // with filepath
      if(options.filepath){
        var filepath= path.resolve(process.cwd(), options.filepath);
        return FS.write(filepath, JSON.stringify(body, null, 4))
                 .then(function () {
                    console.log(chalk.green(util.format('data saved to %s', filepath)))
                 }, printErr);
      }
    }, printErr)
  });

// if empty
if(_.isEmpty(prog.parse(process.argv).args) && process.argv.length === 2) {
  prog.help();
}
